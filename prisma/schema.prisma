generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ENUMS

enum UserRole {
  ADMIN
  AGENCY_OWNER
  AGENCY_SUPER_AGENT // New role
  AGENCY_MEMBER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED // New
  APPOINTMENT_SCHEDULED // New
  FOLLOW_UP // New
  RELAUNCHED // New
  NEGOTIATION
  CONVERTED
  LOST
}

enum TicketStatus {
  NEW
  OPEN
  CLOSED
  RESOLVED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketCategory {
  TECHNICAL
  BUG
  BILLING
  OTHER
}

enum ActivityType {
  STATUS_CHANGE
  NOTE_ADDED
  LEAD_CREATED
}

// MODELS

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      UserRole @default(AGENCY_MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     String?
  phone     String?
  accounts  Account[]
  sessions  Session[]

  agency   Agency? @relation(fields: [agencyId], references: [id])
  agencyId String?
  tickets  Ticket[]

  assignedLeads Lead[] @relation("LeadAssignedTo")
  notes         Note[]
  ticketMessages TicketMessage[]
  notifications  Notification[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Agency {
  id        String   @id @default(cuid())
  name      String
  currency  String   @default("MAD") // Changed default currency
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users         User[]
  leads         Lead[]
  properties    Property[]
  subscription  Subscription?
  tickets       Ticket[]
}

model Lead {
  id        String     @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String?
  status    LeadStatus @default(NEW)
  createdAt DateTime   @default(now())
  updatedAt DateTime @updatedAt
  city      String? // New field
  trafficSource String? // New field
  isUrgent      Boolean @default(false) // New field for urgent leads
  appointmentDate DateTime? // New field for appointment scheduling

  agency   Agency @relation(fields: [agencyId], references: [id])
  agencyId String

  properties Property[] @relation("LeadToProperty")

  assignedTo   User?     @relation("LeadAssignedTo", fields: [assignedToId], references: [id])
  assignedToId String?

  notes      Note[]
  activities Activity[]
}

enum PropertyType {
  MAISON
  APPARTEMENT
  TERRAIN
  COMMERCE
}

enum PropertyStatus {
  A_VENDRE
  VENDU
  EN_LOCATION
  LOUE
}

model Property {
  id            String         @id @default(cuid())
  propertyNumber Int?          // New field, optional
  address     String
  city        String
  zipCode     String
  country     String
  type        PropertyType
  price       Float
  status      PropertyStatus
  description String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  agency   Agency @relation(fields: [agencyId], references: [id])
  agencyId String

  leads Lead[] @relation("LeadToProperty")
  images Image[]
  documents Document[]
}

model Image {
  id        String   @id @default(cuid())
  url       String
  property  Property @relation(fields: [propertyId], references: [id])
  propertyId String
}

model Document {
  id        String   @id @default(cuid())
  url       String
  name      String
  property  Property @relation(fields: [propertyId], references: [id])
  propertyId String
}

model Plan {
  id          String   @id @default(cuid())
  name        String   @unique
  price       Float
  yearlyPrice Float? // New field for yearly pricing
  prospectsLimit Int
  usersLimit  Int      @default(5) // New field
  propertiesLimit Int  @default(0)
  features    String

  subscriptions Subscription[]
}

model Subscription {
  id        String   @id @default(cuid())
  status    String
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agency   Agency @relation(fields: [agencyId], references: [id])
  agencyId String @unique

  plan   Plan   @relation(fields: [planId], references: [id])
  planId String
}

model Ticket {
  id          String       @id @default(cuid())
  subject     String
  description String
  status      TicketStatus @default(NEW)
  priority    TicketPriority @default(MEDIUM)
  category    TicketCategory @default(OTHER)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  agency   Agency @relation(fields: [agencyId], references: [id])
  agencyId String

  user     User   @relation(fields: [userId], references: [id])
  userId   String

  messages TicketMessage[]
}

model Note {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}

model Activity {
  id        String       @id @default(cuid())
  type      ActivityType
  details   String?
  createdAt DateTime     @default(now())

  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId String
}

model TicketMessage {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Notification {
  id          String   @id @default(cuid())
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  link        String?

  recipient   User     @relation(fields: [recipientId], references: [id])
  recipientId String
}